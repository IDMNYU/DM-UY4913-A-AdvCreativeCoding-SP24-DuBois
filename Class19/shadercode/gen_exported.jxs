<!--
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing (at) cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/360050779193-Gen-Code-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html    

-->
<jittershader name="jit.gen.jxs">
	<description>
		code generated JXS file
	</description>
 
	
	<param name="x" type="float" default="0.0"  />
	<param name="y" type="float" default="0.0"  />
	<param name="mode" type="float" default="0.0"  />
	<param name="tin1" type="int" default="0" description="in1"/>
	<param name="dim1" type="vec2" default="1. 1." />
	<language name="glsl" version="1.0">
		
		<bind param="x" program="fp" />
		<bind param="y" program="fp" />
		<bind param="mode" program="fp" />
		<bind param="tin1" program="fp" />
		<bind param="dim1" program="vp" />

		<program name="vp" type="vertex">
<![CDATA[
 
uniform vec2 dim1;

varying vec2 texcoord1;
varying vec2 flip1;
varying vec2 flip1_offset;
varying vec2 texdim1;
varying vec2 texcoord;





void main() {
	
	
	
	texcoord = vec2(gl_MultiTexCoord0.x, 1.-gl_MultiTexCoord0.y);
	texcoord1 = vec2(gl_TextureMatrix[0]*gl_MultiTexCoord0);
	texdim1 = vec2(gl_TextureMatrix[0][0][0],gl_TextureMatrix[0][1][1]);
	flip1 = texdim1/abs(texdim1);
	flip1.y *= -1.;
	flip1_offset = vec2(0., abs(min(flip1.y, 0.)));
	
	texdim1 = abs(texdim1);
	gl_Position = ftransform();
}


]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

#define hypot(x, y) sqrt(x*x+y*y)
#define xor(x, y)	((!(x&&y))&&(x||y))
#define sinh(x)		(0.5*(exp(x) - exp(-x)))
#define cosh(x)		(0.5*(exp(x) + exp(-x)))
#define tanh(x)		((sinh(x))/(cosh(x)))
#define asinh(x)	(log(x) + sqrt(x*x+1.))
#define acosh(x)	(log(x) + sqrt(x*x-1.))
#define atanh(x)	(0.5*log((1.+x)/(1.-x)))
#define trunc(x)	(vec4(x.r > 0. ? floor(x.r) : ceil(x.r), x.g > 0. ? floor(x.g) : ceil(x.g), x.b > 0. ? floor(x.b) : ceil(x.b), x.a > 0. ? floor(x.a) : ceil(x.a)))

vec2 jit_wrap1(vec2 v) {
	return mod(v, 1.);
}

vec2 jit_clamp1(vec2 v) {
	return clamp(v, 0., 1.);
}

vec2 jit_mirror1(vec2 v) {
	return 1.-abs((mod(v, 2.)-1.));
}


uniform float x;
uniform float y;
uniform float mode;
uniform samplerJit0 tin1;

varying vec2 texcoord1;
varying vec2 flip1;
varying vec2 flip1_offset;
varying vec2 texdim1;
varying vec2 texcoord;







vec4 sample_wrap_unit0(samplerJit0 tex, vec2 tc);
vec4 switch_float_vec4(float v1, vec4 v2, vec4 v3);
vec4 sample_wrap_unit0(samplerJit0 tex, vec2 tc) {
	return textureJit0(tex, jit_wrap1(tc*flip1)*texdim1);
}
vec4 switch_float_vec4(float v1, vec4 v2, vec4 v3) {
	return bool(v1) ? v2 : v3;
}



void main() {
	vec4 in1 = textureJit0(tin1, texcoord1);
	vec2 norm = texcoord;
	
	
	
	
	
	float swiz_33 = (norm.r);
	float mul_36 = (swiz_33 * x);
	float mod_56 = (mod(mul_36, 1.0));
	float mul_40 = (swiz_33 * x);
	float floor_44 = (floor(mul_40));
	float div_46 = (floor_44 / x);
	float swiz_34 = (norm.g);
	float mul_37 = (swiz_34 * y);
	float mod_57 = (mod(mul_37, 1.0));
	vec2 vec_35 = (vec2(mod_56, mod_57));
	vec4 sample_48 = (sample_wrap_unit0(tin1, vec_35));
	float mul_39 = (swiz_34 * y);
	float floor_45 = (floor(mul_39));
	float div_47 = (floor_45 / y);
	vec2 vec_41 = (vec2(div_46, div_47));
	vec4 sample_27 = (sample_wrap_unit0(tin1, vec_41));
	vec4 add_51 = (sample_27 + sample_48);
	vec4 mul_54 = (sample_27 * sample_48);
	vec4 switch_52 = (switch_float_vec4(mode, add_51, mul_54));
	gl_FragData[0] = switch_52;
}


]]>
		</program>
	</language>
</jittershader>